#include <iostream>

using namespace std;

// Function to calculate the sum of probabilities between indices i and j
int sum(int p[], int i, int j) {
    int total = 0;
    for (int k = i; k <= j; k++) {
        total += p[k];
    }
    return total;
}

// Function to calculate the optimal binary search tree cost
int optimalBST(int keys[], int p[], int n) {
    // Table to store the cost of optimal BST for a range of keys
    int cost[n][n];

    // Base case: cost of a single key is just its probability
    for (int i = 0; i < n; i++) {
        cost[i][i] = p[i];
    }

    // Fill the table for chains of length 2 to n
    for (int length = 2; length <= n; length++) {
        for (int i = 0; i <= n - length; i++) {
            int j = i + length - 1;
            cost[i][j] = 1000000; // Large number to represent initial "infinity"

            // Try every key in the range as the root
            for (int r = i; r <= j; r++) {
                // Cost of the left and right subtrees
                int leftCost = (r > i) ? cost[i][r - 1] : 0;
                int rightCost = (r < j) ? cost[r + 1][j] : 0;

                // Total cost is the sum of left subtree cost, right subtree cost, and the probabilities of keys in the range
                int totalCost = leftCost + rightCost + sum(p, i, j);
                if (totalCost < cost[i][j]) {
                    cost[i][j] = totalCost;
                }
            }
        }
    }

    // The optimal cost for the whole range of keys is stored in cost[0][n-1]
    return cost[0][n - 1];
}

int main() {
    int choice;
    do {
        // Display menu to the user
        cout << "\n--- Optimal Binary Search Tree ---\n";
        cout << "1. Calculate optimal BST search cost\n";
        cout << "2. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        if (choice == 1) {
            int n;

            // Ask user for the number of keys
            cout << "Enter the number of keys: ";
            cin >> n;

            int keys[n], p[n];

            // Ask user for the keys and their corresponding probabilities
            cout << "Enter the keys: ";
            for (int i = 0; i < n; i++) {
                cin >> keys[i];
            }

            cout << "Enter the probabilities: ";
            for (int i = 0; i < n; i++) {
                cin >> p[i];
            }

            // Call the optimal BST function and print the result
            int result = optimalBST(keys, p, n);
            cout << "The minimum search cost is: " << result << endl;
        } else if (choice == 2) {
            cout << "Exiting program...\n";
        } else {
            cout << "Invalid choice. Please try again.\n";
        }

    } while (choice != 2);

    return 0;
}

// --- Optimal Binary Search Tree ---
// 1. Calculate optimal BST search cost
// 2. Exit
// Enter your choice: 1
// Enter the number of keys: 3
// Enter the keys: 10 20 30
// Enter the probabilities: 0.34 0.25 0.41
// The minimum search cost is: 1

#include <iostream>
#include <string>
using namespace std;

// Structure to represent a node in the AVL tree
struct Node {
    string keyword;
    string meaning;
    int height;
    Node* left;
    Node* right;
    
    Node(string k, string m) {
        keyword = k;
        meaning = m;
        height = 1;
        left = right = NULL;
    }
};

// Function to get the height of a node
int height(Node* node) {
    if (node == NULL)
        return 0;
    return node->height;
}

// Function to get the balance factor of a node
int getBalance(Node* node) {
    if (node == NULL)
        return 0;
    return height(node->left) - height(node->right);
}

// Right rotate the subtree rooted with y
Node* rightRotate(Node* y) {
    Node* x = y->left;
    Node* T2 = x->right;

    x->right = y;
    y->left = T2;

    y->height = max(height(y->left), height(y->right)) + 1;
    x->height = max(height(x->left), height(x->right)) + 1;

    return x;
}

// Left rotate the subtree rooted with x
Node* leftRotate(Node* x) {
    Node* y = x->right;
    Node* T2 = y->left;

    y->left = x;
    x->right = T2;

    x->height = max(height(x->left), height(x->right)) + 1;
    y->height = max(height(y->left), height(y->right)) + 1;

    return y;
}

// Function to insert a new node
Node* insert(Node* node, string keyword, string meaning) {
    if (node == NULL)
        return new Node(keyword, meaning);

    if (keyword < node->keyword)
        node->left = insert(node->left, keyword, meaning);
    else if (keyword > node->keyword)
        node->right = insert(node->right, keyword, meaning);
    else
        return node;  // Duplicate keys are not allowed

    node->height = max(height(node->left), height(node->right)) + 1;
    int balance = getBalance(node);

    if (balance > 1 && keyword < node->left->keyword)
        return rightRotate(node);
    if (balance < -1 && keyword > node->right->keyword)
        return leftRotate(node);
    if (balance > 1 && keyword > node->left->keyword) {
        node->left = leftRotate(node->left);
        return rightRotate(node);
    }
    if (balance < -1 && keyword < node->right->keyword) {
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }

    return node;
}

// Function to find the node with minimum key
Node* minNode(Node* node) {
    Node* current = node;
    while (current->left != NULL)
        current = current->left;
    return current;
}

// Function to delete a node
Node* deleteNode(Node* root, string keyword) {
    if (root == NULL)
        return root;

    if (keyword < root->keyword)
        root->left = deleteNode(root->left, keyword);
    else if (keyword > root->keyword)
        root->right = deleteNode(root->right, keyword);
    else {
        if (root->left == NULL) {
            Node* temp = root->right;
            delete root;
            return temp;
        }
        else if (root->right == NULL) {
            Node* temp = root->left;
            delete root;
            return temp;
        }

        Node* temp = minNode(root->right);
        root->keyword = temp->keyword;
        root->meaning = temp->meaning;
        root->right = deleteNode(root->right, temp->keyword);
    }

    root->height = max(height(root->left), height(root->right)) + 1;
    int balance = getBalance(root);

    if (balance > 1 && getBalance(root->left) >= 0)
        return rightRotate(root);
    if (balance < -1 && getBalance(root->right) <= 0)
        return leftRotate(root);
    if (balance > 1 && getBalance(root->left) < 0) {
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }
    if (balance < -1 && getBalance(root->right) > 0) {
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }

    return root;
}

// Function to update the meaning of an existing keyword
Node* updateKeyword(Node* root, string keyword, string newMeaning) {
    if (root == NULL)
        return root;

    if (keyword < root->keyword)
        root->left = updateKeyword(root->left, keyword, newMeaning);
    else if (keyword > root->keyword)
        root->right = updateKeyword(root->right, keyword, newMeaning);
    else
        root->meaning = newMeaning;

    return root;
}

// Function to perform an inorder traversal (ascending order)
void inorder(Node* root) {
    if (root == NULL)
        return;
    inorder(root->left);
    cout << root->keyword << ": " << root->meaning << endl;
    inorder(root->right);
}

// Function to perform a reverse inorder traversal (descending order)
void reverseInorder(Node* root) {
    if (root == NULL)
        return;
    reverseInorder(root->right);
    cout << root->keyword << ": " << root->meaning << endl;
    reverseInorder(root->left);
}

// Function to find the number of comparisons for a keyword search in the AVL tree
int findMaxComparisons(Node* root, string keyword, int comparisons) {
    if (root == NULL)
        return comparisons;

    comparisons++;
    if (keyword < root->keyword)
        return findMaxComparisons(root->left, keyword, comparisons);
    else if (keyword > root->keyword)
        return findMaxComparisons(root->right, keyword, comparisons);
    else
        return comparisons;
}

int main() {
    Node* root = NULL;
    int choice;
    string keyword, meaning;
    int comparisons = 0; // Declare outside the switch block

    do {
        cout << "\nDictionary Menu:\n";
        cout << "1. Add a new keyword\n";
        cout << "2. Delete a keyword\n";
        cout << "3. Update the meaning of a keyword\n";
        cout << "4. Display dictionary in ascending order\n";
        cout << "5. Display dictionary in descending order\n";
        cout << "6. Find maximum comparisons to find a keyword\n";
        cout << "7. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter the keyword to add: ";
                cin >> keyword;
                cout << "Enter the meaning: ";
                cin >> meaning;
                root = insert(root, keyword, meaning);
                cout << "Keyword added successfully!" << endl;
                break;

            case 2:
                cout << "Enter the keyword to delete: ";
                cin >> keyword;
                root = deleteNode(root, keyword);
                cout << "Keyword deleted successfully!" << endl;
                break;

            case 3:
                cout << "Enter the keyword to update: ";
                cin >> keyword;
                cout << "Enter the new meaning: ";
                cin >> meaning;
                root = updateKeyword(root, keyword, meaning);
                cout << "Keyword updated successfully!" << endl;
                break;

            case 4:
                cout << "Dictionary in Ascending Order:" << endl;
                inorder(root);
                break;

            case 5:
                cout << "Dictionary in Descending Order:" << endl;
                reverseInorder(root);
                break;

            case 6:
                cout << "Enter the keyword to search: ";
                cin >> keyword;
                comparisons = findMaxComparisons(root, keyword, 0);
                cout << "Maximum comparisons to find '" << keyword << "': " << comparisons << endl;
                break;

            case 7:
                cout << "Exiting the program..." << endl;
                break;

            default:
                cout << "Invalid choice! Please try again." << endl;
        }
    } while (choice != 7);

    return 0;
}
